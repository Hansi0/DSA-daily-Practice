/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList <Integer> res= new ArrayList<>();
        Stack<TreeNode> st=new Stack<>();
        TreeNode node=root;
        TreeNode lastvisited=null;

        while(!st.isEmpty() || node!=null){
            if(node!=null){
                st.push(node);
                node=node.left;

            }
            else{
                TreeNode peeknode=st.peek();
                if(peeknode.right!=null && lastvisited!=peeknode.right){
                    node=peeknode.right;


                }else{
                    st.pop();
                    res.add(peeknode.val);
                    lastvisited =peeknode;
                }
            }
            
        }
        return res;

    }
}

//by using recursive approach
 /*postorder(root,res);

        
        return res;
        

        
    }
    public void postorder(TreeNode root, ArrayList<Integer> res){
        if(root==null){
            return;
        }
        postorder(root.left,res);
        postorder(root.right,res);
        res.add(root.val);*/






        /*while(!st.isEmpty() || node!=null){
            if(node.left!=null){
                st.push(node);
                node=node.left;

            }
            else{
                TreeNode temp=st.peek().right;
                if(temp==null){
                    temp=st.peek();
                    st.pop();
                    res.add(temp.val);
                    while(!st.isEmpty() || temp=st.peek().right){
                        temp=st.peek();
                        st.pop();
                        res.add(temp.val);


                    }
                }else{
                    node=temp;
                }
            }
        }
       */
